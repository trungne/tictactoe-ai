import _ from "lodash";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useCallback, useEffect, useState } from "react";
import { Board, Coordinate, PlayerTurn } from "../src/types";
import {
  createBoard,
  getActions,
  getMax,
  getResult,
  getWinner,
  hasNoTilesLeft,
} from "../src/utils";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const [board, setBoard] = useState<Board>(createBoard());
  const [winner, setWinner] = useState<PlayerTurn | null>(null);

  // AI - X turn
  const botPlay = (currentBoard: Board) => {
    const actions = getActions(currentBoard);
    let maxValue = Number.MIN_SAFE_INTEGER;

    let bestPossibleActions: { action: Coordinate; score: number }[] = [];
    actions.forEach((action) => {
      const possibleBoard = getResult(currentBoard, action, "X");

      const getMaxValue = getMax(possibleBoard);
      if (getMaxValue >= maxValue) {
        bestPossibleActions.push({ action, score: getMaxValue });
        maxValue = getMaxValue;
      }
    });
    bestPossibleActions = bestPossibleActions.filter(
      ({ score }) => score === maxValue
    );
    console.log(bestPossibleActions);

    if (bestPossibleActions.length > 0) {
      const randomIdx = Math.floor(Math.random() * bestPossibleActions.length);
      console.log(randomIdx)
      const bestBoard = getResult(
        currentBoard,
        bestPossibleActions[randomIdx].action,
        "X"
      );
      setBoard(bestBoard);
      setWinner(getWinner(bestBoard));
    }
  };

  // human - O turn
  const play = (coordinate: Coordinate) => {
    if (
      board[coordinate.row][coordinate.column] !== undefined ||
      hasNoTilesLeft(board) ||
      winner
    ) {
      return;
    }

    const newBoard = getResult(board, coordinate, "O");
    const currentWinner = getWinner(newBoard);
    if (hasNoTilesLeft(newBoard)) {
      setBoard(newBoard);
      return;
    }

    if (currentWinner) {
      setBoard(newBoard);
      setWinner(currentWinner);
      return;
    }

    botPlay(newBoard);
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen flex flex-col justify-center items-center">
        <div className="relative grid grid-rows-3 bg-red-50">
          <h1 className="absolute mx-auto left-0 top-[-60px] text-6xl mb-10">
            {hasNoTilesLeft(board) && "Tied"}
            {winner && `Winner: ${winner}`}
          </h1>

          {board.map((row, idxRow) => {
            return (
              <div key={`row${idxRow}`} className="grid grid-cols-3 ">
                {row.map((_column, idxColumn) => {
                  return (
                    <button
                      onClick={() => {
                        play({
                          row: idxRow,
                          column: idxColumn,
                        });
                      }}
                      className="
                      border-solid border border-black hover:bg-slate-300 
                      text-black text-6xl
                      w-40 h-40 flex justify-center items-center"
                      key={`row${idxRow}column${idxColumn}`}
                    >
                      {board[idxRow][idxColumn]}
                    </button>
                  );
                })}
              </div>
            );
          })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
