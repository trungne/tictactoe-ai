import _ from "lodash";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useCallback, useEffect, useState } from "react";
import { Board, Coordinate, PlayerTurn } from "../src/types";
import {
  createBoard,
  getActions,
  getMax,
  getResult,
  getWinner,
  hasNoTilesLeft,
} from "../src/utils";
import styles from "../styles/Home.module.css";
import cx from "classnames";

const Home: NextPage = () => {
  const [board, setBoard] = useState<Board>(createBoard());
  const [winner, setWinner] = useState<PlayerTurn | null>(null);

  // AI - X turn
  const botPlay = (currentBoard: Board) => {
    const actions = getActions(currentBoard);
    let maxValue = Number.MIN_SAFE_INTEGER;

    let bestPossibleActions: { action: Coordinate; score: number }[] = [];
    actions.forEach((action) => {
      const possibleBoard = getResult(currentBoard, action, "X");

      const getMaxValue = getMax(possibleBoard);
      if (getMaxValue >= maxValue) {
        bestPossibleActions.push({ action, score: getMaxValue });
        maxValue = getMaxValue;
      }
    });

    bestPossibleActions = bestPossibleActions.filter(
      ({ score }) => score === maxValue
    );

    if (bestPossibleActions.length > 0) {
      const randomIdx = Math.floor(Math.random() * bestPossibleActions.length);
      const bestBoard = getResult(
        currentBoard,
        bestPossibleActions[randomIdx].action,
        "X"
      );
      setBoard(bestBoard);
      setWinner(getWinner(bestBoard));
    }
  };

  // human - O turn
  const play = (coordinate: Coordinate) => {
    if (
      board[coordinate.row][coordinate.column] !== undefined ||
      hasNoTilesLeft(board) ||
      winner
    ) {
      return;
    }

    const newBoard = getResult(board, coordinate, "O");
    const currentWinner = getWinner(newBoard);
    if (hasNoTilesLeft(newBoard)) {
      setBoard(newBoard);
      return;
    }

    if (currentWinner) {
      setBoard(newBoard);
      setWinner(currentWinner);
      return;
    }

    botPlay(newBoard);
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-[100vh] max-w-3xl m-auto flex flex-col justify-center ">
        <div className="min-h-[20vh] flex justify-center items-center">
          {(hasNoTilesLeft(board) || winner) && (
            <>
              <h1 className="prose text-honeydew text-4xl md:text-6xl text-center p-8">
                {hasNoTilesLeft(board) && "Tied"}

                {winner && (
                  <>
                    Winner:{" "}
                    <span
                      className={`${
                        winner === "O" ? "text-crayola" : "text-saffron"
                      }`}
                    >
                      {winner}
                    </span>
                  </>
                )}
              </h1>
              <button
                className="prose hover:bg-slate-400 text-honeydew text-4xl md:text-6xl text-center p-8"
                onClick={() => {
                  setBoard(createBoard());
                  setWinner(null);
                }}
              >
                Play again
              </button>
            </>
          )}
        </div>

        <div className="w-[80%] m-auto grid grid-rows-3 bg-honeydew">
          {board.map((row, idxRow) => {
            return (
              <div key={`row${idxRow}`} className="grid grid-cols-3">
                {row.map((_, idxColumn) => {
                  return (
                    <button
                      disabled={
                        hasNoTilesLeft(board) ||
                        !!winner ||
                        !!board[idxRow][idxColumn]
                      }
                      onClick={() => {
                        play({
                          row: idxRow,
                          column: idxColumn,
                        });
                      }}
                      className={cx(
                        `w-full aspect-square 
                        border-solid border border-black 
                        hover:bg-slate-300 
                        text-black text-3xl md:text-6xl lg:text-8xl 
                        flex justify-center items-center`,
                        board[idxRow][idxColumn] === "O"
                          ? "text-crayola"
                          : "text-saffron",
                        hasNoTilesLeft(board) ||
                          !!winner ||
                          !!board[idxRow][idxColumn]
                          ? "disabled:pointer-events-none"
                          : ""
                      )}
                      key={`row${idxRow}column${idxColumn}`}
                    >
                      {board[idxRow][idxColumn]}
                    </button>
                  );
                })}
              </div>
            );
          })}
        </div>
      </main>
    </div>
  );
};

export default Home;
